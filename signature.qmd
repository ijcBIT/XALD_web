---
title: "age signature"
author: "Izar de Villasante"
format: 
   html:
     df-print: paged

number-sections: true
crossref:
  chapters: true
cahce: false
params:
  ctl_qc_dir: "data/ctl/"

---

```{r load packages}
#| include: false
#| eval: true
options(digits=2)

library(cnv.methyl)
library(minfi)
library(data.table)
# library(targets)
library(SummarizedExperiment)
library(S4Vectors)
source("R/functions.R")

# Controls:
# controls <- readRDS("data/controls.rds")
  ss_ctl <- readRDS("data/ss_ctl.rds")#data.table::data.table(as.data.frame(controls@colData))
  dmps <- readRDS("data/dmps.rds")
  full_mod <- readRDS("data/full_mod.rds")
  sig_mod <- full_mod[abs(full_mod$t)>2 & full_mod$p.value < 0.01 ,]
  probelist <- readRDS("data/probelist.rds")
  dtab <- readRDS("data/dtab.rds")
  pdata <- readRDS("data/ctl_pdata.rds")
  dt_path <- readRDS("data/dt_path_cgIn.rds")
  pathways_refsets <- readRDS("data/pathways_cgIn.rds")

# Adults:
  ss_adults <- readRDS("data/ss_Adults.rds")
  DMPs<-readRDS("data/dmps_adults.rds")
  DMPs2 <- readRDS( "data/dmps_adults_cov.rds")
  per<-readRDS("data/per.rds")
  pdata_adults <- readRDS("data/pdata_adults.rds")
  dtp <- readRDS("data/dtp.rds")
disease_dt_path <- readRDS("data/disease_dt_path.rds")


```



```{r dtable function}
#| include: false
#| eval: true
dtable<-function(data){
  DT::datatable(
        { data},
        filter = 'top',
        # selection = list(mode = 'multiple', selected = c(1:10), target = 'column', selectable = c(-2, -3)),
        fillContainer = F,
        # style =  "bootstrap",

        extensions = 'Buttons',

        options = list(
          paging = TRUE,
          pageLength = 10,
          searching = TRUE,
          fixedColumns = TRUE,
          autoWidth = FALSE,
          scrollX=TRUE,
          digits=4,
          ordering = TRUE,
          dom = 'Bfrtip',
          buttons = list(
            list(
              extend = "collection",
              text = 'download entire dataset',
              action = DT::JS("function ( e, dt, node, config ) {
                                                    Shiny.setInputValue('test', true, {priority: 'event'});
                                                    }")
            ),
            'copy',
            'csv',
            'excel'
          ),

          class = "display",
          server=TRUE
        ),
      ) |> DT::formatRound(which(sapply(data,is.double)),4)
}
```

```{r dtable function server}
#| include: false
#| eval: true
#| context: server
myModal <- function() {

  div(id = "test",
      shiny::modalDialog(downloadButton("download1","Download data as csv"),
                         br(),
                         br(),
                         downloadButton("download2","Download data as excel"),
                         easyClose = TRUE, title = "Download Table")
  )
}

renderDT<- function(data){
  output$dtable <- DT::renderDataTable({
    dtable(data)
  })
  

    shiny::observeEvent(input$test, {
      print("hello")
      showModal(myModal())
    })
    output$download1 <- shiny::downloadHandler(
      filename = function() {
        paste("data-", Sys.Date(), ".csv", sep="")
      },
      content = function(file) {
        write.csv(data, file)
      }
    )

    output$download2 <- shiny::downloadHandler(
      filename = function() {
        paste("data-", Sys.Date(), ".xlsx", sep="")
      },
      content = function(file) {
        writexl::write_xlsx(data, file)
      })
}

```


# Question 1: difference between controls age/young: {#sec-intro}

There are 2 ways in which we are going to check for the age signature of our controls.

-   1.A: By checking if there are significant DMPs on our data comparing young and old controls (healthy samples)

-   1.B: By subsetting the EPIC methylation array sites to those that have been previously reported to change methylation with age.


As the difference between XALD age groups where much less then those observed in previous studies (REF?), we set out to confirm the existance of age signatures (age associated methylation changes)
in our control samples. First we will check for any changes between healthy children and adult controls, and secondly we check those against known age-associated sites.


## PBMC cell aging signature:{#sec-PBMC}

As reference set we will use age-reated sites described in the paper by Wilma, T. et al @Steegenga2014

In fact the authors utilized 3 different datasets: 

1. cgSet_Exprs: Probes with observed methylation changes AND change in expression in the associated genes (total 398 genes) 
2. cgSet_NO:    Probes with observed methylation changes but NO change in expression in the associated genes (2390 genes) 
3. cgSet_pre:   Probes reported to be age-related in previous literature (liture-curated).

We created an additional one by combining 2 &3: 4. cgSetm: The combination/union of cgSet_Exprs & cgSet_NO


So let's prepare our data replicating their workflow:

### DNA methylation & gene expression: {#sec-preprocessing}

450k array where pre-processed and cleaned and the old subjects where compared to the young subjects.

20,917 were significantly regulated (Lima *t* test, *p* \< 0.01) between the group of old and young subjects. Over 5 % methylation difference between the mean of the group of the young and old subjects was found for 10,625. 7,598 gene-related and 3,027 intergenic probes. From the 7,598 gene-related 640 probes where further discarded because of pseudo- and uncharacterized genes, antisense RNAs, long intergenic nonprotein coding RNAs and micro-RNAs.

Finally a clean set of 6958 probes where selected and the most significant differentially expressed genes were identified using −2 \> *t* value \> 2 as a cut-off. Fig 2A

![](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4082572/bin/11357_2014_9648_Fig2_HTML.jpg)

398 genes where selected as the most significant differentially expressed genes and 170 of those have at least 2 associated DMPs.

The following table corresponds to supplementary table 2 and contains the data they usedin the article. 

```{r readexcel}
#| column: page-inset-right
#| echo: false
suppressMessages( readxl::read_xls("data/11357_2014_9648_MOESM2_ESM.xls",sheet = 2,skip = 2,))->sup2
dtable(sup2)

```

## Inhouse data:

### Load:

Loaded data has been filtered out for single nucleotide polymorphism (SNP) at or near the target CpG with minor allele frequency equal or larger than 1 % and probes that contained more than 2 SNPs.

```{r}
#| eval: false

library(data.table)
library(targets)
library(SummarizedExperiment)
library(S4Vectors)
ss <- readRDS("data/SS.rds")
ss_ctl <- ss[Type=="Control",]

# rgSet <- cnv.methyl::read.metharray.exp.par(targets=ss_ctl,ncores = 36,folder = "analysis/intermediate/")
rgSet <- minfi::read.metharray.exp(targets = ss_ctl)

mset <- name_rgset(rgSet,ss_ctl,exclude="206702460034_R05C01",newname="Sample_Name")

controls<-filter(                                         # 1.- Filters: -probes: pval<0.01 
    targets=ss_ctl, rgSet=mset,sampGroups="Sample_Group", #              -samples: 10% probes fail
    qc_folder = "analysis/")
ss_ctl <- data.table::data.table(as.data.frame(controls@colData))
```

### QC plots:

```{r}
#| eval: false

idcol="Sample_Name"
ctl_qc_dir=params$ctl_qc_dir
dir.create(ctl_qc_dir,recursive = T, showWarnings = F)
controls_qc <- 
qc(                                                       # Makes qc plots:qcReport, density, beanplot, mean_qc 
    controls,sampGroups = "Sample_Group",sampNames=idcol,idcol=idcol, qc_folder = ctl_qc_dir
    )
```
 
![density_plot](`r paste0(params$ctl_qc_dir,"density_plot.png")`){alt="density_plot"}

![bean_plot](`r paste0(params$ctl_qc_dir,"bean_plot.png")`){alt="bean_plot"}


There are `r 1051028#dim(controls)[1]` probes that pass QC and `r 23#dim(controls)[2]` control samples in our dataset.

```{r}
table(ss_ctl$Condition)
```

### Normalization:

Following the aforementioned paper @Steegenga2014 we now normalize the data using the subset-quantile within array normalization (SWAN) method:

```{r normalize controls}
#| eval: false

library(minfi)
norm<-minfi::preprocessSWAN(controls)
```

## 1.A: Methylation differences between young & adult: {#sec-controls}

To test the effect of age on our controls we will split our samples into adult +18 and young \<18 subjects. Then we will fit a model to compare the methylation levels of this 2 groups.

```{r}
#| eval: false
mvals<-getM(norm) 
full_mod<-mod(object = mvals, group_var = "Condition",
                        singular=F,pairwise = T,
                        metadata = ss_ctl,
                        idcol="Sample_Name")
saveRDS(full_mod,"data/full_mod.rds")
```


```{r}
#| eval: false
sig_mod<-full_mod[abs(full_mod$t)>2 & full_mod$p.value < 0.01 ,]

saveRDS(sig_mod,"data/sig_mod.rds")

```

`r nrow(sig_mod)` were significantly regulated (Lima *t* test, *p* \< 0.01) between the group of adult and child subjects using −2 \> *t* value \> 2 as a cut-off.

```{r DMPs controls}
#| eval: false

library(cnv.methyl)
library(minfi)
dmps <- cnv.methyl::DMPextr(fit = sig_mod,                         # Toptable & stats
                                            ContrastsDM = colnames(sig_mod$contrasts),
                                            beta_normalized = minfi::getBeta(controls),
                                            p.value = 0.01,
                                            mDiff = 0.05,
                                            ann = minfi::getAnnotation(controls),
                                            writeOut = F)
dmps$Type<-ifelse(dmps$diff_meanMeth>0,"Hyper","Hypo")
```

From here we could extract our own group of DMPs comparing the two age groups from the contrasts.

```{r}
#| eval: false
DMPs<-data.table::as.data.table(dmps)
DMPs<-DMPs[,UCSC_RefGene_Name:=sapply(UCSC_RefGene_Name,function(x) paste(unique(unlist(strsplit(x,";"))),collapse = ";"))]
DMPs[nchar(UCSC_RefGene_Name)>1,]
saveRDS(DMPs,"data/dmps.rds")
```


So yes, there are actually `r NROW(dmps)` DMPs.

### DMPs Plots:

In the following plots you can observe 

```{r dmp plots ctl}
#| column: screen-inset-right
#| layout-ncol: 2
#| results: hide 
#| fig-keep: all
plotDMP(data.table::as.data.table(dmps))
```

Now we already checked that there are methylation differences in our data by separating controls into young and old. Since our samples are only controls and the only controlled difference between them is age, this suggests that the observed methylation differences are related to that factor. Nevertheless, there could be other underlying variables affecting the methylation levels between the 2 conditions that we ignore.

So far, we followed the proceeding from the paper in our analysis in order to mimic their workflow so the results are comparable. Nevertheless, they also measured expression values, which they used to correlate with methylation levels in order to filter the gene candidates for their age-related profile. In our case, there is no expression, so we can't construct a dataset of candidate genes taking into account gene expression. Eventhough, we can use the same datasets from their previous work on our data in order to see if the set with expression and without expression behave in a different way.

## 1.B: Intersection with reference datasets:

As mentioned previously, another way to find out if there is a change in methylation associated with aging in our data is looking at those sites that have been previously reported to show this association. We will use the PBMC reference datasets (with/without expression change) plus the one from previous literature that is also mentioned in the paper from @Steegenga2014:

### Load data:

```{r}
#| eval: false
library(readxl)
paper_betas <- suppressMessages( readxl::read_excel("data/11357_2014_9648_MOESM2_ESM.xls", 
    sheet = "sTable 2S", skip = 2))
paper_betas2 <- suppressMessages(readxl::read_excel("data/11357_2014_9648_MOESM2_ESM.xls", 
    sheet = "sTable 3S", skip = 2))
paper_betas3 <- suppressMessages(readxl::read_excel("data/11357_2014_9648_MOESM2_ESM.xls", 
    sheet = "sTable 4S", skip = 6))
```

### Reference probelists #sec-probelist

There are 4 reference probelists:

1.  cgSet_Exprs: The set of probes that come from observed changes in methylation BUT NOT in expression (398 genes)

2.  cgSet_NO: The set of probes that come from observed changes in methylation AND expression (2390 genes)

3.  cgSetm: The combination/union of cgSet_Exprs & cgSet_NO

4.  cgSet_pre: The set of probes reported to be age-related on previous literature.

```{r}
#| eval: false

probelist <- list(
  cgSet_Exprs = paper_betas$ProbeID,
  cgSet_NO = paper_betas2$ProbeID,
  cgSetm = unique(c(paper_betas$ProbeID,paper_betas2$ProbeID)),
  cgSet_pre = paper_betas3$`Probe nr`

)
saveRDS(probelist,"data/probelist.rds")
```

### reference vs inhouse:

We have 2 models, the full model, which has all the probes from the normalised data in it `full_mod` and the same model which has been filtered according to the same criteria as in the paper `sig_mod` (0.01 pval & +-2t) to keep only sites with a significant change in methylation.

So, as we saw in 1A we get a set of +50K DMPs, following the steps described in the paper to construct a new reference dataset from our data (excluding the part where data is crossed with expression).\
We believe those sites are related to age because the model was built comparing old vs young healthy subjects, but there might be other factors affecting the differences in methylation, there are 2 solutions we propose:

1.  sig_mod: We could either intersect our significant probes `r nrow(sig_mod)` with the sites that have been previously reported to be related with age.

2.  full_mod: Test the whole reference datasets on our data.

sig_mod may offer better results, since it is based on the differences present in our own data, but for the same reason it could also introduce bias.

Let's take a look at the sample size of each of the age_profile datasets. (4 references x 2 models = 8 datasets):

-   dataset: The name of the reference dataset used
-   N_Age_ref: Total size of the reference dataset
-   N_tested: The subset of probes from each reference dataset that we tested (are present in our chip and have not been discarded in QC steps)
-   N_DMPs: Number of probes that are significantlly methylated between the 2 groups that are also present in each of the age reference subset.
-   observed: Number of DMPs with percentajes relative to reference datasets.
-   expected: Expected number of DMPs + percentage of DMPs (N_DMPs/N_total)

```{r}
#| eval: false
library(data.table)
tab <- t(sapply(probelist,function(x) table(rownames(full_mod) %in% x)))
tab2 <- t(sapply(probelist,function(x) table(rownames(sig_mod) %in% x)))
dtab<-data.table::data.table(
  dataset = c(rownames(tab)),
  N_Age_ref = sapply(probelist,NROW),
  N_tested = paste0(tab[,2], " (",round(tab[,2]/sapply(probelist,NROW)*100,2), "%)"),
  N_DMPs = tab2[,2]
  
)
dtab[,observed:=paste0(N_DMPs, "/", tab[,2], " (",round((N_DMPs/tab[,2])*100,2), "%)"  )]
dtab[, expected:=paste0( round(tab[,2] * round( NROW(sig_mod$coefficients)/NROW(full_mod$coefficients) *100,2)/100)," (",round( NROW(sig_mod$coefficients)/NROW(full_mod$coefficients) *100,2),"%)")]

```

```{r}
#| label: tbl-ctl-enrich
#| tbl-cap: Enrichment of each age-related reference set in the age control model 
dtab
```
Since the reference datasets have been previously reported to be associated with age, they can be used to filter the significant sites from our model to select those with further evidence to be related with ageing. In the table above we can observe that there is a good proportion of DMPs in the 2 age groups from the controls associated with these age-related references.
After data preprocessing around 90% of the cgs for each reference set is present in our data, which we consider is a fair representation. 
Our significant dataset captures more than 30% of the probes for each reference dataset, while if you look at all the different probes from the array, the overall percentage of DMPs between young and adults is 16.14% which suggests that there is some overlap between previously reported age-related sites and DMPs between young and adult controls from our study. Nevertheless, it is also advisable to include the full reference sets in further analysis.

To analyse DMPs in age-related sites in the disease, we will use a combination of these reference sets, as well as sub-samples corresponding to the intersections between DMPs from our controls and the reference sets.
For more about inhouse reference datasets @sec-inhouseref .

### Betas:

We can now construct each of the 8 datasets with mean beta values for young/adult groups:

```{r}
#| eval: false

betas <- minfi::getBeta(controls)

# Row index to multiply by betas taking the columns present in each contrast multiplying by 1/0
design_FULL <- t(full_mod$design)
# For each row on design (columns selected for each contrast) do betas * 1/0 to get the correct columns and then do the mean values for each group:
betas_c_FULL <-apply(design_FULL , 1 , function(x) apply(betas[,ss_ctl$Sample_Name] %*% diag(x),1 , function(y) mean(y[y!=0])))

betas_c <- lapply(list(full_mod,sig_mod),function(fit){
  # Row index to multiply by betas taking the columns present in each contrast multiplying by 1/0
  design <- t(fit$design)
  
  dt_c<-rbindlist(lapply(names(probelist), function(n){
    idx<-intersect(probelist[[n]],rownames(fit))
    cgs<-intersect(idx,rownames(betas))
    b <- betas[cgs,]
    # For each row on design (columns selected for each contrast) do betas * 1/0 to get the correct columns and then do the mean values for each group:
    dt=as.data.table(apply(design , 1 , function(x) apply(b %*% diag(x),1 , function(y) mean(y[y!=0]))))
    dt$ref=n
    dt$cg=cgs
    dt
    } 
  ))
  dt_c
})
names(betas_c)<- c("full_mod","sig_mod")
pdata<-rbindlist(betas_c,idcol = "model")
names(pdata)[2:3]<-c("adult","child")
pdata[,diff:=adult-child]
pdata<-pdata[!is.na(diff),]
pdata[,type:=ifelse(diff>0,"hyper","hypo")]
```

We are ready to test mean differences and plot:

```{r}
#| include: false
saveRDS(pdata,"data/ctl_pdata.rds")
```


### Significance:

Appart from a quantitative approach in order to measure at which extent each reference set is related to our data, a more qualitative measure can be obtained, based on statitics.  Also, these test will tell us at which extent the differences in methylation between young and adults are significant for each of the reference sets. Imagine for example, that our data has a smaller percentage of DMPs in reference set A than in set B, but the difference in methylation for sites in A are much greater than those in B. This is the kind of qualitative measurement that the statistical test will tell us.

Methylation data is bimodal, since the effects of methylation can either occur by hyper or hypomethylation. This means the data is not going to show a normal distribution. Thus, a wilcoxon non-parametric test is used to compare the means .

```{r wilcoxon controls}
#| label: tbl-ctl.wilcox
#| tbl-cap: "Young vs Adult Controls methylation distributions significance test."
t <- pdata[,wilcox.test(child,adult)$p.value,by=c("ref","model")]
t
```

Also a bimodal distribution could be transformed in 2 normal distributions if we split data into hyper and hypomethylated probes.

```{r controls t.test}
#| label: tbl-ctl.t-test
#| tbl-cap: "Young vs Adult Controls methylation distributions significance test."

pdata[,sd.child:=sd(child),by=type]
pdata[,sd.adult:=sd(adult),by=type]
z_bimodal <- pdata[,c(N=.N,BSDA::z.test(child,adult,sigma.x=unique(sd.child),sigma.y=unique(sd.adult))),by=c("model","ref","type")]
# t_bimodal <- pdata[,t.test(child,adult),by=c("ref","model","type")]
z_bimodal[,group:=rep(c("child","adult"),.N/2)]
zt<- dcast(z_bimodal, ref + model + type + N + p.value ~ group, value.var = c("estimate"))
zt[,diff:=adult-child]
data.table::setorder(zt,p.value,diff)
kableExtra::kbl(zt)|>kableExtra::kable_classic_2()
# kableExtra::kbl(z_bimodal[,.SD,.SDcols=c("ref","model","type","estimate","conf.int","p.value")],digits=2) |> kableExtra::kable_classic()
```

In this second statistical test, instead of comparing the distribution of the two groups we are splitting the data into hyper and hypomethylation, so it adds a new layer of information. The data in the table is sorted by p.value, so it shows the most significant first, but there is the estimate mean difference too.

The results show that there are significant differences.

Dataset means are all significantlly diferent (either with wilcoxon or student t test). For cgSet_pre from the literature there is a decrease in methylation with age. There is an increase in methylation for the cgSet_NO dataset (without expression) and less differences for those sites correlated with expression changes.

### Plots:

```{r boxplot, fig.height= 12 }
#| column: page
#| out-width: 100%
#| fig-format: svg

p_long<-melt(pdata, measure.vars=c("adult","child") )
p_long[,color:=ifelse(type  == "hyper","red","green")]

library(ggplot2)
library(viridis)

  p1<-ggplot(p_long, aes(x=variable, y=value, fill= variable)) +
     geom_boxplot(aes(fill=variable),outlier.fill="ivory",alpha = 0.5) +
      # scale_fill_manual(ys=levels(col_subclass)) +
      geom_jitter(color=p_long$color,
                  size=0.1,show.legend = TRUE,
                  alpha=0.2) +

      #theme_ipsum() +
      theme(
        legend.position="left",
        plot.title = element_text(size=11)
      ) +
      ggtitle("Beta ys between young and old") +
      xlab("Cells")+
    ylab("relative fraction")+
            scale_x_discrete(guide = guide_axis(angle = 60))+
    
    facet_wrap(as.formula(paste("~ ref + model" )),ncol = 4)
  
   
p2<-ggplot(p_long[ref!="cgSetm",], aes(x=variable, y=value, fill= variable)) +
     geom_boxplot(aes(fill=variable),outlier.fill="ivory",alpha = 0.5) +
      # scale_fill_manual(ys=levels(col_subclass)) +
      # geom_jitter(#color=pdata$color,
      #             size=0.1,show.legend = TRUE,
      #             alpha=0.2) +

      #theme_ipsum() +
      theme(
        legend.position="left",
        plot.title = element_text(size=11)
      ) +
      ggtitle("Beta ys between young and old") +
      xlab("Cells")+
    ylab("relative fraction")+
            scale_x_discrete(guide = guide_axis(angle = 60))+
    
    facet_wrap(as.formula(paste("~ ref + model" )),ncol = 2)
p2

```

## Inhouse reference datasets {#sec-inhouseref}

Since we suspect that our disease is related to accelarated aging but we don't really know if one reference data is going to be better than the other for our disease, we created a combination of reference sets that try to capture as much variability as posible. This sets start with the prefix `cgIn_` to differenciate them from the previous `cgSet_`. 

We will also inspect which pathways are realted to each of these sets.

```{r}
#| eval: false
pathways_refsets<-list()
```

In order to analyse which pathways are associated to the DMPs, we will first annotate the probes with gene names. To do that we will use the convinient annotation provided by illumina plataform for their EPIC methylation arrays. 

```{r}
#| eval: false

library(data.table)
library(IlluminaHumanMethylationEPICanno.ilm10b2.hg19)

# 1. Get gene names from EPIC annotation object
EPIC_anno<-data.table::as.data.table(as.data.frame(IlluminaHumanMethylationEPICanno.ilm10b2.hg19::Other),keep.rownames = "cg")
data.table::setkey(EPIC_anno,cg)

# 2. Filter for significant probes and absolute mean difference of beta values > 0.05 
dt_path<-p_long[model=="sig_mod"&abs(diff)>0.05,.SD,.SDcols=c("ref","cg","type","diff")]

# 3. add gene name information to our data.table
data.table::setkey(dt_path,cg)
dt_path$gene_name <- EPIC_anno[dt_path$cg,UCSC_RefGene_Name]
dt_path$Contrast="controls"
```

```{r}
head(dt_path)

```

### cgIn_consensus:

The consensus set by merging all reference sets and selecting significant probes in our model.

```{r}
probelist$cgIn_consensus <- unique(dt_path$cg)#intersect(row.names(sig_mod), unique(unlist(probelist)))
```

Now we  will look at the associated pathways to that reference set:

```{r}
#| eval: false
source("R/functions.R")
# Crete a list to store pathways results:
cgIn_consensus<-list()

# Subset annotation to the corresponding probeset:
anno<-dt_path[probelist$cgIn_consensus,]

# Get hypomethylated genes list: 
genes.hypo <- unique(unlist(sapply(
  anno[type=="hypo",gene_name]
  ,function(x)unlist(strsplit(x,";")))))

# Get pathways associated with the previous set:
pathways.hypo <- gprofiler2::gost(signif = T ,genes.hypo)

# Clean results:
dth<- data.table::as.data.table(pathways.hypo[[1]])
dth[,FDR:=p_value]
dth[,Contrast:="controls"]
dth[,TERM:=term_name]
dth[,source:=factor(source)]

pathway<-path_results(dth,method="source",cols = c("term_size","query_size","intersection_size"))

# Store results 
cgIn_consensus$hypo <- pathway

# Repeat for hypermethylated genes: 

genes.hyper <- unique(unlist(sapply(
  anno[type=="hyper",gene_name]
  ,function(x)unlist(strsplit(x,";")))))
pathways.hyper <- gprofiler2::gost(signif = T ,genes.hyper)

# Store results 
dth<- data.table::as.data.table(pathways.hyper[[1]])
dth[,FDR:=p_value]
dth[,Contrast:="controls"]
dth[,TERM:=term_name]
dth[,source:=factor(source)]
pathway<-path_results(dth,method="source",cols = c("term_size","query_size","intersection_size"))

cgIn_consensus$hyper<-pathway
pathways_refsets[["cgIn_consensus"]]<-cgIn_consensus


```

#### Hyper pathways:

```{r}
dtable(pathways_refsets$cgIn_consensus$hyper)
```


#### Hypo pathways:

```{r}
dtable(pathways_refsets$cgIn_consensus$hypo)
```


### cgIn_top:

Select the top significant probes in our model. We will use limma's topTable function to get the top 5000 most significant probes.

```{r}
probelist$cgIn_top <- rownames(limma::topTable(sig_mod,number=5000))
```

For convinience the chunk of code above has been converted to a function:

```{r}
#| eval: false
pathways_refsets[["cgIn_top"]]<-get_pathway(probeIDs = probelist$cgIn_top,dt=dt_path)

```

#### Hyper pathways:

```{r}
dtable(pathways_refsets$cgIn_top$hyper)
```

#### Hypo pathways:

```{r}
dtable(pathways_refsets$cgIn_top$hypo)
```

### cgIn_pre:

From all the reference datasets in the paper, cgSet_pre contains more DMPs in our data than any other.

```{r}
probelist$cgIn_pre <- dt_path[ref=="cgSet_pre",cg]
```

```{r}
#| eval: false
pathways_refsets[["cgIn_pre"]]<-get_pathway(probelist$cgIn_pre,dt=dt_path)

```

#### Hyper pathways:

```{r}
dtable(pathways_refsets$cgIn_pre$hyper)
```


#### Hypo pathways:

```{r}
dtable(pathways_refsets$cgIn_pre$hypo)
```


### cgIn_NO:

Although it has less %DMPs than When we perform the t-test the dataset from PBMC cell line without changes in expression has a lower p-value.

```{r}
probelist$cgIn_NO <- dt_path[ref=="cgSet_NO",cg]
```

```{r}
#| eval: false
pathways_refsets[["cgIn_NO"]]<-get_pathway(probelist$cgIn_NO,dt=dt_path)

```

#### Hyper pathways:

```{r}
dtable(pathways_refsets$cgIn_NO$hyper)
```


#### Hypo pathways:

```{r}
dtable(pathways_refsets$cgIn_NO$hypo)
```




# Question 2: DMPs in disease {#sec-disease}

The next question we have to answer is if the methylation of the age_related profiles is higher in the disease group than in controls. Or in other words, if there is an accelerated aging for the samples with the disease. So first we remove the effect of age in methylation and then we check for the methylation differences in the age-related probes.

## AMN_Adults:

Since we only have childs with the cerebral condition, and we believe that the disease could behave differently in childs and adults, we will first only focus in adults with AMN, cAMN (AMN + cerebral) and controls.

```{r}
#| eval: false
library(data.table)
ss_adults <- readRDS("data/ss_Adults.rds")

rgSet <- cnv.methyl::read.metharray.exp.par(targets=ss_adults,ncores = 36,folder = "analysis/intermediate/")
rgSet <- minfi::read.metharray.exp(targets = ss_adults)

mset <- name_rgset(rgSet,ss_adults,exclude="206702460034_R05C01",newname="Sample_Name")

adults<-filter(                                         # 1.- Filters: -probes: pval<0.01 
    targets=ss_adults, rgSet=mset,sampGroups="Sample_Group", #              -samples: 10% probes fail
    qc_folder = "analysis/")
ss_adults <- data.table::data.table(as.data.frame(adults@colData))


```



```{r}
table(ss_adults$Type)
```

Also, we can distinguish between controls and the two types of disease AMN and cerebral.

```{r}
table(droplevels.factor(ss_adults$Condition))
```

Thus, we have 2 possible different comparisons. Either we group togehter all the patients or we distinguish 2 phenotypes.

### Normalization:

Following the aforementioned paper @Steegenga2014  we now normalize the data using the subset-quantile within array normalization (SWAN) method:

```{r}
#| eval: false

library(minfi)
norm<-minfi::preprocessSWAN(adults)
clean <- prep(norm, remove_sex=F, arraytype="EPIC")
```

### Methylation differences:

Since we are interested in age related differences caused by the disease we must remove normal methylation changes due to age. Then remaining differences in methylation in previously selected age-related probes can be attributed to the disease phenotypes. There are 2 ways of removing the effects of age.

1.  We can remove the effect of Age from the data by regressing on Age and using the residuals to fit a second model. Then we can use the disease group as the predictor variable to see if any group is showing more methylation than the controls for the age-specific sites.

2.  Another option is to add Age as a covariate in the model.

#### Model1: correct for age and use residuals:{#sec-residuals}

```{r residuals model}
#| eval: false 

bvals<-getM(clean) 
design <- model.matrix(~Age,data = ss_adults)
ss_adults <- ss_adults[ss_adults$Sample_Name %in% colnames(bvals)]
age_fit <- limma::lmFit(bvals, design=design )
res <- residuals(age_fit, bvals)
```

Now we perform a linear model comparing disease and control group:

```{r covariate model}
#| eval: false 

res_mod_ext <- mod(object = res, group_var = "Condition",
                        singular=F,pairwise = T,
                        metadata = ss_adults,
                        idcol="Sample_Name")
res_mod <- mod(object = res, group_var = "Type",
                        singular=F,pairwise = T,
                        metadata = ss_adults,
                        idcol="Sample_Name")
```

```{r sig res mod}
#| eval: false 
sig_res_mod<-res_mod[abs(res_mod$t)>2 & res_mod$p.value < 0.01 ,]

```

`r 14435 #nrow(sig_res_mod)` were significantly regulated (Lima *t* test, *p* \< 0.01) between the group of adult and child subjects using −2 \> *t* value \> 2 as a cut-off.

```{r}
#| eval: false 
library(cnv.methyl)
library(minfi)
dmps <- cnv.methyl::DMPextr(fit = sig_res_mod,                         # Toptable & stats
                                            ContrastsDM = colnames(res_mod$contrasts),
                                            beta_normalized = getBeta(clean),
                                            p.value = 0.01,
                                            mDiff = 0.05,
                                            ann = minfi::getAnnotation(adults),
                                            writeOut = F)
dmps$Type <- ifelse(dmps$diff_meanMeth > 0,"Hyper","Hypo")
dmps<-as.data.table(dmps, keep.rownames=T)
saveRDS(dmps,"data/dmps_adults_res.rds")
dmps_ext <- cnv.methyl::DMPextr(fit = res_mod_ext,                         # Toptable & stats
                                            ContrastsDM = colnames(res_mod_ext$contrasts),
                                            beta_normalized = getBeta(clean),
                                            p.value = 0.01,
                                            mDiff = 0.05,
                                            ann = minfi::getAnnotation(adults),
                                            writeOut = F)
dmps_ext$Type <- ifelse(dmps_ext$diff_meanMeth > 0,"Hyper","Hypo")
dmps_ext<- as.data.table(dmps_ext[abs(dmps_ext$t)>2 & dmps_ext$P.Value < 0.01,],keep.rownames = T)

saveRDS(dmps_ext,"data/dmps_adults_ext.rds")
```

The 2 dmp sets can be merged together into a single data.frame:

```{r}
#| eval: false
library(data.table)
DMPs <- rbind(dmps, dmps_ext)

DMPs<-DMPs[,UCSC_RefGene_Name:=sapply(UCSC_RefGene_Name,function(x) paste(unique(unlist(strsplit(x,";"))),collapse = ";"))]
saveRDS(DMPs,"data/dmps_adults.rds")
```

So there are `r NROW(DMPs)` DMPs.

This is the number of DMPs for each of the Contrasts:

```{r}
table(DMPs$Contrast)
```

##### DMP plots

```{r}
#| column: screen-inset-right
#| layout-ncol: 2
#| results: hide 
#| fig-keep: all
plotDMP(data.table::as.data.table(DMPs))
```

#### Model2: Add age as a covariate:

```{r}
#| eval: false


bvals2<-getM(clean) 

mod2_ext <- mod(object = bvals2, group_var = "Condition",
                        singular=F,pairwise = T,
                        metadata = ss_adults,covs = "Age",
                        idcol="Sample_Name")
mod2 <- mod(object = bvals2, group_var = "Type",
                        singular=F,pairwise = T,
                        metadata = ss_adults, covs = "Age",
                        idcol="Sample_Name")
```

```{r}
#| eval: false
sig_mod2<-mod2[abs(mod2$t)>2 & mod2$p.value < 0.01 ,]
# Have to check the filters for each of the 3 contrasts by sepparate for example applying lapply on contrast. Will make one dmp for each of the contrasts.
# sig_mod2_ext<-mod2_ext[abs(mod2_ext$t)>2 & mod2_ext$p.value < 0.01 ,]
```

`r #nrow(sig_mod2)` were significantly regulated (Lima *t* test, *p* \< 0.01) between the group of adult and child subjects using −2 \> *t* value \> 2 as a cut-off.

```{r}
#| eval: false
library(cnv.methyl)
library(minfi)
dmps <- cnv.methyl::DMPextr(fit = sig_mod2,                         # Toptable & stats
                                            ContrastsDM = colnames(sig_mod2$contrasts),
                                            beta_normalized = minfi::getBeta(clean),
                                            p.value = 0.01,
                                            mDiff = 0.05,
                                            ann = minfi::getAnnotation(adults),
                                            writeOut = F)
dmps$Type <- ifelse(dmps$diff_meanMeth > 0,"Hyper","Hypo")
dmps<-as.data.table(dmps, keep.rownames=T)
saveRDS(dmps,"data/dmps_mod2.rds")
dmps_ext <- cnv.methyl::DMPextr(fit = mod2_ext,                         # Toptable & stats
                                            ContrastsDM = colnames(mod2_ext$contrasts),
                                            beta_normalized = minfi::getBeta(clean),
                                            p.value = 0.01,
                                            mDiff = 0.05,
                                            ann = minfi::getAnnotation(adults),
                                            writeOut = F)
dmps_ext$Type <- ifelse(dmps_ext$diff_meanMeth > 0,"Hyper","Hypo")
dmps_ext<- as.data.table(dmps_ext[abs(dmps_ext$t)>2 & dmps_ext$P.Value < 0.01,],keep.rownames = T)
saveRDS(dmps_ext,"data/dmps_mod2_ext.rds")
```

The 2 dmp sets can be merged together into a single data.frame:

```{r DMPs2}
#| eval: false
library(data.table)
DMPs2 <- rbind(dmps, dmps_ext)

DMPs2<-DMPs2[,UCSC_RefGene_Name:=sapply(UCSC_RefGene_Name,function(x) paste(unique(unlist(strsplit(x,";"))),collapse = ";"))]
NROW(DMPs2)
```

So there are `r NROW(DMPs2)` DMPs2.

```{r}
table(DMPs2$Contrast)

```

##### DMPs plots:

```{r}
#| column: screen-inset-right
#| layout-ncol: 2
#| results: hide 
#| fig-keep: all
plotDMP(data.table::as.data.table(DMPs2))
```


#### Model comparison:

Both models seem to yield very similar results. Let's put it together:

```{r}
DMPs_tab <- rbind(
  cbind(model="m1",DMPs[,table(Type, Contrast)]),
  cbind(model="m2",DMPs2[,table(Type, Contrast)])
)

data.frame(DMPs_tab)
```

There are no significative differences between AMN and the controls, maybe because the hetereogeneity of AMN group and the inbalance on the samples. In any case, if they exist the differences are very subtle and they can be attributed to age.

```{r}
DMPs2[Contrast == "AMN-CTL.adult",list(probe=rn,chr,pos,Type,Beta_difference=round(diff_meanMeth,2),gene=UCSC_RefGene_Name,UCSC_RefGene_Group,Relation_to_Island) ]
```

Nevertheless there are some sites spotted for cAMN vs controls. Furthermore, the number of DMPs is increased for the contrast AMN-cAMN. 

```{r}
dt2 <- DMPs2[Contrast == "AMN-cAMN",list(probe=rn,Contrast,chr,pos,Type,Beta_difference=round(diff_meanMeth,2),gene=UCSC_RefGene_Name,UCSC_RefGene_Group,Relation_to_Island) ]
range(dt2[["Beta_difference"]])
head(dt2[order(-abs(dt2[["Beta_difference"]]))],20)
```

As shown in the table above there are much higher differences between the 2 conditions than between either of them with the control. This suggest that rather than having more methylation in the same direction by favouring similar methylation processes there may be different mechanisms involved methylating different sites for AMN and cAMN.


And here is a table with top 10 DMP sites for each contrast:

```{r}
dt10 <- DMPs2[,list(probe=rn,Contrast,chr,pos,Type,Beta_difference=round(diff_meanMeth,2),gene=UCSC_RefGene_Name,UCSC_RefGene_Group,Relation_to_Island) ]
dmp10<-dt10[order(-abs(Beta_difference)),head(.SD,10),by=Contrast]
dtable(dmp10)
```

You can take a look at the scatter plots on how do the beta values of each of these `r length(unique(dmp10$probe))` sites change with age here @sec-betas_age_plot 


### reference vs Adults:

#### data inspection:

We have 4 models:

1.  Age corrected by fitting residuals (m1):

    -   `res_mod` 2 factors: control & disease

    -   `res_mod_ext`3 factors: 2 disease AMN cAMN + controls

2.  Condition + Age as covariate:

    -   `mod2`2 factors: control & disease

    -   `mod2_ext` 3 factors: 2 disease AMN cAMN + controls

We have 8 reference sets, inside our probelist list object. The same 4 reference sets used previously with the controls with cgsites extracted from the paper *supplementary material (tables 2S, 3S & 4S)* plus the 4 datasets that come from our own controls by comparing young and old healthy subjects @sec-inhouseref.

In order to assess the enrichment of each dataset for our disease in a quantitative manner, the percentage of probes in each of the sets that are significantlly methylated is calculated.

```{r}
#| eval: false
cont<-colnames(res_mod_ext$contrasts)

tab <- t(sapply(probelist,function(x) table(rownames(res_mod) %in% x)))
tab2 <- t(sapply(probelist,function(x) table(rownames(sig_res_mod) %in% x)))
tab3 <- sapply(
  probelist,
  function(p) length(intersect(rownames(sig_res_mod),p))
  )

tab4 <- data.table::as.data.table(sapply(cont,function(x){
  tval <- res_mod_ext$t[,x]
  pval <- res_mod_ext$p.value[,x]
  tval.i <- which(abs(tval) > 2 )
  pval.i <- which(pval < 0.01)
  i<-intersect(tval.i, pval.i)
  cg=names(tval[i])
  sapply(probelist,function(p) length(intersect(cg,p)))
  }),keep.rownames = T)

dtab<-tab4[,"Disease-Control":=tab2[,2]]
dtab[,"Common_probes":=tab[,2]]
dtab[, total := sapply(probelist,NROW)]
dtab[, model := "m1"]

#### model2
tab <- t(sapply(probelist,function(x) table(rownames(mod2) %in% x)))
tab2 <- t(sapply(probelist,function(x) table(rownames(sig_mod2) %in% x)))
tab3 <- sapply(cont,function(x){
  x=names(mod2_ext$t[,x])
  sapply(probelist,function(p) length(intersect(x,p)))
  })

tab4 <- data.table::as.data.table(sapply(cont,function(x){
  tval <- mod2_ext$t[,x]
  pval <- mod2_ext$p.value[,x]
  tval.i <- which(abs(tval) > 2 )
  pval.i <- which(pval < 0.01)
  i<-intersect(tval.i, pval.i)
  cg=names(tval[i])
  sapply(probelist,function(p) length(intersect(cg,p)))
  }),keep.rownames = T)

dtab2<-tab4[,"Disease-Control":=tab2[,2]]
dtab2[,"Common_probes":=tab[,2]]
dtab2[, total := sapply(probelist,NROW)]
dtab2[, model := "m2"]

Dtab <- rbind(dtab,dtab2)
per <- Dtab[,c( Common_probes, total,
             lapply(.SD,function(x)paste0(x," (",round(x/as.numeric(Common_probes) *100,2),"%)"))
),by=c("rn","model"),.SDcols=cont]


```

```{r}
per
```


In general, all the sets perform in a similar way except for the one selecting top5000 DMPs.

The 2 sets that seem to be more enriched for age-related methylation changes are the one based on our own controls `cgIn_top` and the one with no associated expression change `cgIn_NO`. It is not surprising to see that the set of probes based on the differences observed from our own data outperforms the sets coming from other sources.

In respect with the set with no-expression, in the paper they hypothesize that methylation changes uncorrelated with changes in expression may be caused by aging.


#### Betas:

Now let's take the beta values in consideration:

##### Betas residual model:


```{r}
#| include: false
#convert Beta value to M value
B2M<-function (x)
{
    x[x == 0] <- min(x[x != 0])
    x[x == 1] <- max(x[x != 1])
    log2(x) - log2(1 - x)
}
#convert M value to Beta value
M2B<-function(x)
{2^x/(1+2^x)}

```


```{r betas residual model}
#| eval: false

betas <- M2B(res)



models<-list(res_mod=res_mod,
             res_mod_ext=res_mod_ext
             # mod2=mod2,
             # mod2_ext=mod2_ext,
             
             )

betas_res <- lapply(names(models),function(model_name){
  # Row index to multiply by betas taking the columns present in each contrast multiplying by 1/0
  fit<-models[[model_name]]
  design <- t(fit$design)

  dt_c<-rbindlist(lapply(names(probelist), function(n){
    idx<-intersect(probelist[[n]],rownames(fit))
    cgs<-intersect(idx,rownames(betas))
    b <- betas[cgs,]
    # For each row on design (columns selected for each contrast) do betas * 1/0 to get the correct columns and then do the mean values for each group:
    dt=as.data.table(apply(design , 1 , function(x) apply(b %*% diag(x),1 , function(y) mean(y[y!=0]))))
    dt$ref=n
    dt$cg<-cgs
    dt$model=model_name
    dt
    b<-melt(dt,id.vars = c("ref","cg","model"),variable.name = "Condition",value.name = "bVal")->b
    b
    }
  ))
  dt_c
})
names(betas_res)<-names(models)
dtb_res <- rbindlist(betas_res)
dtbm_res <- melt(dtb_res, value.name = "bVal",)
dtbm_res <- dtbm_res[Condition!="Age"]
dtbm_res$model <- "residuals"

b2_dt <- as.data.table(res,keep.rownames = "cg")
b2_m <- melt(b2_dt,variable.name = "Sample_Name", value.name = "bVal")
b2_res<-merge(b2_m,ss_adults[,.SD, .SDcols=c("Sample_Name", "Age","Condition")])
b2_res$model="residuals"

```

```{r}
#| eval: false
#| include: false
setkey(dtbm_res,cg)
lapply(names(probelist),function(n){
  tab<-dtbm_res[probelist[n]  ,sort(mean(bVal)),by=c("Condition","model")]
  })


```


```{r betas covariate model}
#| eval: false
betas <- M2B(bvals2)
models<-list(
  # res_mod=res_mod,
  # res_mod_ext=res_mod_ext
  mod2=mod2,
  mod2_ext=mod2_ext
)

betas_cov <- lapply(names(models),function(model_name){
  # Row index to multiply by betas taking the columns present in each contrast multiplying by 1/0
  fit<-models[[model_name]]
  design <- t(fit$design)

  dt_c<-rbindlist(lapply(names(probelist), function(n){
    idx<-intersect(probelist[[n]],rownames(fit))
    cgs<-intersect(idx,rownames(betas))
    b <- betas[cgs,]
    # For each row on design (columns selected for each contrast) do betas * 1/0 to get the correct columns and then do the mean values for each group:
    dt=as.data.table(apply(design , 1 , function(x) apply(b %*% diag(x),1 , function(y) mean(y[y!=0]))))
    dt$ref=n
    dt$cg<-cgs
    dt$model=model_name
    dt
    b<-melt(dt,id.vars = c("ref","cg","model"),variable.name = "Condition",value.name = "bVal")->b
    b
    }
  ))
  dt_c
})
names(betas_cov)<-names(models)
dtb_cov <- rbindlist(betas_cov)
dtbm_cov <- melt(dtb_cov, value.name = "bVal",)
dtbm_cov <- dtbm_cov[Condition!="Age"]
dtbm_cov$model <- "covariate"


b2_dt <- as.data.table(betas,keep.rownames = "cg")
b2_m <- melt(b2_dt,variable.name = "Sample_Name", value.name = "bVal")
b2_cov<-merge(b2_m,ss_adults[,.SD, .SDcols=c("Sample_Name", "Age","Condition")])
b2_cov$model="covariate"
```


```{r}
#| eval: false
# Mean Beta values for the contrasts:
pdata<-rbind(dtbm_cov,dtbm_res)
pdata<-pdata[!is.na(bVal),]
pdata<-pdata[Condition !="Age",]
pdata[startsWith( model,"res_mod"),model:="residuals"]
pdata[startsWith( model,"mod2"),model:="covariate"]
saveRDS(pdata,"data/pdata_adults.rds")
```

```{r}
#| eval: false
#Beta Values for individual samples: 
pdata_indiv<-rbind(b2_cov,b2_res) 
saveRDS(pdata_indiv,"data/pdata_adults_indiv.rds")
```

We are ready to test mean differences and plot:

#### Plots:

Let's see at the general distribution of the density plot.

```{r}
#| eval: false
de<-limma::plotDensities(mod2_ext)
de
```

We see that cAMD looks the more extreme

##### top10 Beta vs age plot {#sec-betas_age_plot}

Here we inspect the top DMP sites individually. We selected the top 10 DMPs for each of the contrasts:
```{r}
table(dmp10$Contrast)
```

```{r}
#| eval: false
#| include: false
setkey(pdata_indiv,cg)
dt_ind_cov<-pdata_indiv[model=="covariate",]

dmp10[,cg:=probe]
dt10_p<-dmp10[,list(Contrast=Contrast,cg=probe, Relation_to_Island= Relation_to_Island)]
dtp <-merge(dt_ind_cov[dt10_p$cg,], dt10_p)
saveRDS(dtp, "data/dtp.rds")
```


```{r top_probes_contrast, fig.height=24, dpi=200}
#| column: page
#| layout-ncol: 3
#| results: hide 
#| fig-keep: all

library(ggplot2)
library(gridExtra)
plt_list_DMP <- list()
for (cont in unique(dtp$Contrast)){
  dtp_c <- dtp[Contrast == cont,]
  dt_mean <- dtp_c[,list(b=mean(bVal),avage=mean(Age)),by=c("Condition","model","cg")]
plt_list_DMP[[cont]]<-ggplot(dtp_c, aes(x = Age, y = bVal, color=Condition, group=factor(model) )) +
    geom_point() +
    # ylim(0, 1) +
    geom_point(data=dt_mean,aes(x=avage,y=b,col=Condition),size=4,shape=24)  +
    geom_smooth(aes(group=Condition),
              method = "lm", formula = y ~ x, se = F) +

    labs(title=paste0('Beta values vs. Age: ', cont, ' top 10 Differentially methylated sites.'), x='Age', y='Residuals') +
      facet_grid(cg ~ Contrast, margins = F)

}
plt_list_DMP
```



#### Significance test:

```{r model covariate t.test}
#| label: tbl-adult_z-test_cov_model
#| tbl-cap: "Adult Disease vs Adult Controls methylation distributions significance test."

library(data.table)
pdata<-pdata_adults
pdata_res<-pdata[model == "covariate",]
zt<-list()
pdata_res[,sd:=stats::sd(bVal),by=c("model","Condition")]
sd_tab<-pdata_res[,unique(sd),by=Condition]
pdata_res_w<-dcast(pdata_res,cg+model+ref~Condition,value.var = c("bVal"))
z_bimodal_Disease <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    TypeControl,
    TypeDisease,
    sigma.x=sd_tab[Condition=="TypeControl",V1],
    sigma.y=sd_tab[Condition=="TypeDisease",V1]
    )
  ),by=c("ref","model")]
z_bimodal_Disease[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_Disease[,condition:="Disease"]
zt[["Disease"]] <- dcast(z_bimodal_Disease, ref + model + condition+ N + p.value ~ group, value.var = c("estimate"))



z_bimodal_AMN <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    ConditionCTL.adult,
    ConditionAMN,
    sigma.y=sd_tab[Condition=="ConditionCTL.adult",V1],
    sigma.x=sd_tab[Condition=="ConditionAMN",V1]
    )
  ),by=c("ref","model")]

z_bimodal_AMN[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_AMN[,condition:="AMN"]
zt[["AMN"]] <- dcast(z_bimodal_AMN, ref + model + condition+ N + p.value ~ group, value.var = c("estimate"))

z_bimodal_cAMN <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    ConditionCTL.adult,
    ConditioncAMN,
    sigma.x=sd_tab[Condition=="ConditionCTL.adult",V1],
    sigma.y=sd_tab[Condition=="ConditioncAMN",V1]
        )
  ),by=c("ref","model")]
z_bimodal_cAMN[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_cAMN[,condition:="cAMN"]
zt[["cAMN"]] <- dcast(z_bimodal_cAMN, ref + model + condition+  N + p.value ~ group, value.var = c("estimate"))

ztab<-rbindlist(zt)
# t_bimodal <- pdata_res[,t.test(child,adult),by=c("ref","model","type")]

ztab[,diff:=Case-Ctl]
data.table::setorder(ztab,p.value,diff)
kableExtra::kbl(ztab)|>kableExtra::kable_classic_2()
# kableExtra::kbl(z_bimodal[,.SD,.SDcols=c("ref","model","type","estimate","conf.int","p.value")],digits=2) |> kableExtra::kable_classic()
```

```{r model residuals t.test}
#| label: tbl-adult_z-test_residuals_model
#| tbl-cap: "Adult Disease vs Adult Controls methylation distributions significance test."

pdata<-pdata_adults
pdata_res<-pdata[model == "residuals",]
zt<-list()
pdata_res[,sd:=stats::sd(bVal),by=c("model","Condition")]
sd_tab<-pdata_res[,unique(sd),by=Condition]
pdata_res_w<-dcast(pdata_res,cg+model+ref~Condition,value.var = c("bVal"))
z_bimodal_Disease <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    TypeControl,
    TypeDisease,
    sigma.x=sd_tab[Condition=="TypeControl",V1],
    sigma.y=sd_tab[Condition=="TypeDisease",V1]
    )
  ),by=c("ref","model")]
z_bimodal_Disease[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_Disease[,condition:="Disease"]
zt[["Disease"]] <- dcast(z_bimodal_Disease, ref + model + condition+ N + p.value ~ group, value.var = c("estimate"))



z_bimodal_AMN <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    ConditionCTL.adult,
    ConditionAMN,
    sigma.y=sd_tab[Condition=="ConditionCTL.adult",V1],
    sigma.x=sd_tab[Condition=="ConditionAMN",V1]
    )
  ),by=c("ref","model")]

z_bimodal_AMN[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_AMN[,condition:="AMN"]
zt[["AMN"]] <- dcast(z_bimodal_AMN, ref + model + condition+ N + p.value ~ group, value.var = c("estimate"))

z_bimodal_cAMN <- pdata_res_w[,c(
  N=.N,
  BSDA::z.test(
    ConditionCTL.adult,
    ConditioncAMN,
    sigma.x=sd_tab[Condition=="ConditionCTL.adult",V1],
    sigma.y=sd_tab[Condition=="ConditioncAMN",V1]
        )
  ),by=c("ref","model")]
z_bimodal_cAMN[,group:=rep(c("Ctl","Case"),.N/2)]
z_bimodal_cAMN[,condition:="cAMN"]
zt[["cAMN"]] <- dcast(z_bimodal_cAMN, ref + model + condition+  N + p.value ~ group, value.var = c("estimate"))

ztab<-rbindlist(zt)
# t_bimodal <- pdata_res[,t.test(child,adult),by=c("ref","model","type")]

ztab[,diff:=Case-Ctl]
data.table::setorder(ztab,p.value,diff)
kableExtra::kbl(ztab)|>kableExtra::kable_classic_2()
# kableExtra::kbl(z_bimodal[,.SD,.SDcols=c("ref","model","type","estimate","conf.int","p.value")],digits=2) |> kableExtra::kable_classic()
```


We see there is a small difference in methylation for the dataset cgSetm which combines data that comes from PBMC cells, although that seems to be specially true for the subset with no correlation with expression changes.
For more information about the pathways associated with the set of methylated genes for each reference set take a look at @sec-inhouseref set 

# Question 3: Age signature relataed to the disease

```{r}
#| eval: false
library(data.table)
library(IlluminaHumanMethylationEPICanno.ilm10b2.hg19)
pdata[,diff:=bVal]
# 2. Filter for significant probes and absolute mean difference of beta values > 0.05 
dt_path<-dt_path[abs(diff)>0.05,.SD,.SDcols=c("ref","cg","type","diff")]

# 3. add gene name information to our data.table
data.table::setkey(dt_path,cg)
dt_path$gene_name <- EPIC_anno[dt_path$cg,UCSC_RefGene_Name]
```

Select the top significant probes in our model. We will use limma's topTable function to get the top 500 most significant probes.

```{r}
#| eval: false

# Top 500 DMPs:
top5 <- as.data.table(limma::topTable(mod2_ext, number=500),keep.rownames = "cg")

# Keep name of the contrast:
N_contrasts <- length(colnames(mod2_ext$contrasts))
names(top5)[(1:N_contrasts)+1] <- colnames(mod2_ext$contrasts)

# Add gene annotation
top5$gene_name <- EPIC_anno[top5$cg,UCSC_RefGene_Name]

# Select columns and melt to generate a data.table with appropiate info and structure:
disease_dt_path <- data.table::melt.data.table(top5[,.SD,.SDcols=c("cg",colnames(mod2_ext$contrasts),"gene_name")],id.vars = c("cg","gene_name"),value.name = "diff",variable.name = "Contrast")

# Add type:
disease_dt_path[, type:=ifelse(diff>0,"hyper","hypo")]
disease_dt_path$ref = "top500_disease"
```


```{r}
disease_dt_path <- disease_dt_path[abs(diff)>0.05,]
setkey(disease_dt_path,"cg")
pathways_desease <- get_pathway(probeIDs = disease_dt_path[Contrast == "AMN-cAMN",cg],dt=disease_dt_path)

```

## Pathways:

### Hyper pathways:

```{r}
dtable(pathways_desease$hyper)
```


### Hypo pathways:

```{r}
dtable(pathways_desease$hypo)
```


